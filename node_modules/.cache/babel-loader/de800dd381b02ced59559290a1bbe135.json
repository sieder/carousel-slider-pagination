{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/svillareal/dev/test/simple-react-carousel/src/components/Carousel/Carousel.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Children } from \"react\";\n\nconst Carousel = ({\n  children,\n  show,\n  infiniteLoop,\n  withIndicator,\n  renderPreviousButton,\n  renderNextButton,\n  containerClassName,\n  wrapperClassName,\n  contentWrapperClassName,\n  contentClassName,\n  containerProps,\n  wrapperProps,\n  contentWrapperProps,\n  contentProps,\n  indicatorContainerClassName,\n  indicatorContainerProps,\n  indicatorClassNames\n}) => {\n  _s();\n\n  const indicatorContainerRef = React.useRef(null);\n  /**\n   * Total item\n   */\n\n  const length = React.useMemo(() => Children.count(children), [children]);\n  /**\n   * Is the carousel repeating it's item\n   */\n\n  const isRepeating = React.useMemo(() => infiniteLoop && Children.count(children) > show, [children, infiniteLoop, show]);\n  /**\n   * Current Index Item of the Carousel\n   */\n\n  const [currentIndex, setCurrentIndex] = React.useState(isRepeating ? show : 0);\n  /**\n   * Is the carousel's transition enabled\n   */\n\n  const [isTransitionEnabled, setTransitionEnabled] = React.useState(true);\n  /**\n   * First touch position to be used in calculation for the swipe speed\n   */\n\n  const [touchPosition, setTouchPosition] = React.useState(null);\n  /**\n   * Handle if the carousel is repeating\n   * and the currentIndex have been set to the last or first item\n   */\n\n  React.useEffect(() => {\n    if (isRepeating) {\n      if (currentIndex === show || currentIndex === length) {\n        setTransitionEnabled(true);\n      }\n    }\n  }, [currentIndex, isRepeating, show, length]);\n  React.useEffect(() => {\n    if (withIndicator) {\n      var _indicatorContainerRe;\n\n      const active = (_indicatorContainerRe = indicatorContainerRef.current) === null || _indicatorContainerRe === void 0 ? void 0 : _indicatorContainerRe.querySelector(\".dots-active\");\n\n      if (active) {\n        var _indicatorContainerRe2;\n\n        let index = active.getAttribute(\"data-index\");\n\n        if (index !== null && ((_indicatorContainerRe2 = indicatorContainerRef.current) === null || _indicatorContainerRe2 === void 0 ? void 0 : _indicatorContainerRe2.scrollTo)) {\n          var _indicatorContainerRe3;\n\n          (_indicatorContainerRe3 = indicatorContainerRef.current) === null || _indicatorContainerRe3 === void 0 ? void 0 : _indicatorContainerRe3.scrollTo({\n            left: (Number(index) - 2) / 5 * 50,\n            behavior: \"smooth\"\n          });\n        }\n      }\n    }\n  }, [withIndicator, currentIndex]);\n  /**\n   * Move forward to the next item\n   */\n\n  const nextItem = () => {\n    if (isRepeating || currentIndex < length - show) {\n      setCurrentIndex(prevState => prevState + 1);\n    }\n  };\n  /**\n   * Move backward to the previous item\n   */\n\n\n  const previousItem = () => {\n    if (isRepeating || currentIndex > 0) {\n      setCurrentIndex(prevState => prevState - 1);\n    }\n  };\n  /**\n   * Handle when the user start the swipe gesture\n   * @param e TouchEvent\n   */\n\n\n  const handleTouchStart = e => {\n    // Save the first position of the touch\n    const touchDown = e.touches[0].clientX;\n    setTouchPosition(touchDown);\n  };\n  /**\n   * Handle when the user move the finger in swipe gesture\n   * @param e TouchEvent\n   */\n\n\n  const handleTouchMove = e => {\n    // Get initial location\n    const touchDown = touchPosition; // Proceed only if the initial position is not null\n\n    if (touchDown === null) {\n      return;\n    } // Get current position\n\n\n    const currentTouch = e.touches[0].clientX; // Get the difference between previous and current position\n\n    const diff = touchDown - currentTouch; // Go to next item\n\n    if (diff > 5) {\n      nextItem();\n    } // Go to previous item\n\n\n    if (diff < -5) {\n      previousItem();\n    } // Reset initial touch position\n\n\n    setTouchPosition(null);\n  };\n  /**\n   * Handle when carousel transition's ended\n   */\n\n\n  const handleTransitionEnd = () => {\n    if (isRepeating) {\n      if (currentIndex === 0) {\n        setTransitionEnabled(false);\n        setCurrentIndex(length);\n      } else if (currentIndex === length + show) {\n        setTransitionEnabled(false);\n        setCurrentIndex(show);\n      }\n    }\n  };\n  /**\n   * Render previous items before the first item\n   */\n\n\n  const extraPreviousItems = React.useMemo(() => {\n    let output = [];\n\n    for (let index = 0; index < show; index++) {\n      output.push(Children.toArray(children)[length - 1 - index]);\n    }\n\n    output.reverse();\n    return output;\n  }, [children, length, show]);\n  /**\n   * Render next items after the last item\n   */\n\n  const extraNextItems = React.useMemo(() => {\n    let output = [];\n\n    for (let index = 0; index < show; index++) {\n      output.push(Children.toArray(children)[index]);\n    }\n\n    return output;\n  }, [children, show]);\n  const renderDots = React.useMemo(() => {\n    let output = [];\n    const localShow = isRepeating ? show : 0;\n    const localLength = isRepeating ? length : Math.ceil(length / show);\n    const calculatedActiveIndex = currentIndex - localShow < 0 ? length + (currentIndex - localShow) : currentIndex - localShow;\n\n    for (let index = 0; index < localLength; index++) {\n      let className = \"\";\n\n      if (calculatedActiveIndex === index) {\n        className = (indicatorClassNames === null || indicatorClassNames === void 0 ? void 0 : indicatorClassNames.active) || \"dots-active\";\n      } else {\n        if (calculatedActiveIndex === 0) {\n          if (calculatedActiveIndex + index <= 2) {\n            className = (indicatorClassNames === null || indicatorClassNames === void 0 ? void 0 : indicatorClassNames.close) || \"dots-close\";\n          } else {\n            className = (indicatorClassNames === null || indicatorClassNames === void 0 ? void 0 : indicatorClassNames.far) || \"dots-far\";\n          }\n        } else if (calculatedActiveIndex === localLength - 1) {\n          if (Math.abs(calculatedActiveIndex - index) <= 2) {\n            className = (indicatorClassNames === null || indicatorClassNames === void 0 ? void 0 : indicatorClassNames.close) || \"dots-close\";\n          } else {\n            className = (indicatorClassNames === null || indicatorClassNames === void 0 ? void 0 : indicatorClassNames.far) || \"dots-far\";\n          }\n        } else {\n          if (Math.abs(calculatedActiveIndex - index) === 1) {\n            className = (indicatorClassNames === null || indicatorClassNames === void 0 ? void 0 : indicatorClassNames.close) || \"dots-close\";\n          } else {\n            className = (indicatorClassNames === null || indicatorClassNames === void 0 ? void 0 : indicatorClassNames.far) || \"dots-far\";\n          }\n        }\n      }\n\n      output.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-index\": index,\n        className: className\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 19\n      }, this));\n    }\n\n    return output;\n  }, [currentIndex, indicatorClassNames, isRepeating, length, show]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"carousel-container\",\n    className: `carousel-container ${containerClassName || \"\"}`,\n    ...containerProps,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"carousel-wrapper\",\n      className: `carousel-wrapper ${wrapperClassName || \"\"}`,\n      ...wrapperProps,\n      children: [isRepeating || currentIndex > 0 ? renderPreviousButton ? renderPreviousButton(previousItem, \"left-arrow-button\") : /*#__PURE__*/_jsxDEV(\"button\", {\n        \"data-testid\": \"left-button\",\n        onClick: previousItem,\n        className: \"left-arrow-button\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"left-arrow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 13\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"carousel-content-wrapper\",\n        className: `carousel-content-wrapper ${contentWrapperClassName || \"\"}`,\n        ...contentWrapperProps,\n        onTouchStart: handleTouchStart,\n        onTouchMove: handleTouchMove,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          \"data-testid\": \"carousel-content\",\n          className: `carousel-content show-${show} ${contentClassName || \"\"}`,\n          ...contentProps,\n          style: {\n            transform: `translateX(-${currentIndex * (100 / show)}%)`,\n            transition: !isTransitionEnabled ? \"none\" : undefined\n          },\n          onTransitionEnd: () => handleTransitionEnd(),\n          children: [length > show && isRepeating && extraPreviousItems, children, length > show && isRepeating && extraNextItems]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this), isRepeating || currentIndex < length - show ? renderNextButton ? renderNextButton(nextItem, \"right-arrow-button\") : /*#__PURE__*/_jsxDEV(\"button\", {\n        \"data-testid\": \"right-button\",\n        onClick: nextItem,\n        className: \"right-arrow-button\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"right-arrow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 13\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), withIndicator && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"indicator-container\",\n        ref: indicatorContainerRef,\n        className: `indicator-container ${indicatorContainerClassName || \"\"}`,\n        ...indicatorContainerProps,\n        children: renderDots\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Carousel, \"bKoZV86yGhCWt6jGzICU+Vd5uQ0=\");\n\n_c = Carousel;\nexport default Carousel;\n\nvar _c;\n\n$RefreshReg$(_c, \"Carousel\");","map":{"version":3,"sources":["/Users/svillareal/dev/test/simple-react-carousel/src/components/Carousel/Carousel.tsx"],"names":["React","Children","Carousel","children","show","infiniteLoop","withIndicator","renderPreviousButton","renderNextButton","containerClassName","wrapperClassName","contentWrapperClassName","contentClassName","containerProps","wrapperProps","contentWrapperProps","contentProps","indicatorContainerClassName","indicatorContainerProps","indicatorClassNames","indicatorContainerRef","useRef","length","useMemo","count","isRepeating","currentIndex","setCurrentIndex","useState","isTransitionEnabled","setTransitionEnabled","touchPosition","setTouchPosition","useEffect","active","current","querySelector","index","getAttribute","scrollTo","left","Number","behavior","nextItem","prevState","previousItem","handleTouchStart","e","touchDown","touches","clientX","handleTouchMove","currentTouch","diff","handleTransitionEnd","extraPreviousItems","output","push","toArray","reverse","extraNextItems","renderDots","localShow","localLength","Math","ceil","calculatedActiveIndex","className","close","far","abs","transform","transition","undefined"],"mappings":"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","sourcesContent":["import React, { Children } from \"react\";\n\nexport interface ICarouselProps {\n  /**\n   * Items that going to be showed\n   */\n  children: React.ReactNode;\n\n  /**\n   * Indicate how many to show at once\n   */\n  show: number;\n\n  /**\n   * Is the carousel will be repeating\n   */\n  infiniteLoop?: boolean;\n\n  /**\n   * Render with indicator\n   */\n  withIndicator?: boolean;\n\n  /**\n   * Render custom previous button\n   * @param previousItem function to navigate to previous item\n   * @param defaultClass default class for the button, it contain styles to position the button correctly. (not the arrow icon)\n   * @example\n   * <Carousel\n   *   renderPreviousButton={(previousItem, defaultClass) => (\n   *     <button onClick={previousItem} className={defaultClass}>\n   *       previous\n   *     </button>\n   *   )}\n   * >\n   *   ...\n   * </Carousel>\n   */\n  renderPreviousButton?: (\n    previousItem: () => void,\n    defaultClass?: string\n  ) => JSX.Element;\n\n  /**\n   * Render custom next button\n   * @param nextItem function to navigate to next item\n   * @param defaultClass default class for the button, it contain styles to position the button correctly. (not the arrow icon)\n   * @example\n   * <Carousel\n   *   renderNextButton={(nextItem, defaultClass) => (\n   *     <button onClick={nextItem} className={defaultClass}>\n   *       next\n   *     </button>\n   *   )}\n   * >\n   *   ...\n   * </Carousel>\n   */\n  renderNextButton?: (\n    nextItem: () => void,\n    defaultClassName?: string\n  ) => JSX.Element;\n\n  /**\n   * additional className for container element\n   */\n  containerClassName?: string;\n\n  /**\n   * props for container element, be aware that if you supply className props here, it will overwrite the default one\n   */\n  containerProps?: React.HTMLProps<HTMLDivElement>;\n\n  /**\n   * additional className for wrapper element\n   */\n  wrapperClassName?: string;\n\n  /**\n   * props for wrapper element, be aware that if you supply className props here, it will overwrite the default one\n   */\n  wrapperProps?: React.HTMLProps<HTMLDivElement>;\n\n  /**\n   * additional className for content wrapper element\n   */\n  contentWrapperClassName?: string;\n\n  /**\n   * props for content wrapper element, be aware that if you supply className props here, it will overwrite the default one\n   */\n  contentWrapperProps?: React.HTMLProps<HTMLDivElement>;\n\n  /**\n   * additional className for content element\n   */\n  contentClassName?: string;\n\n  /**\n   * props for content element, be aware that if you supply className props here, it will overwrite the default one\n   */\n  contentProps?: React.HTMLProps<HTMLDivElement>;\n\n  /**\n   * Classname for indicator container\n   */\n  indicatorContainerClassName?: string;\n\n  /**\n   * props for indicator container element, be aware that if you supply className and ref props here, it will overwrite the default one\n   */\n  indicatorContainerProps?: React.HTMLProps<HTMLDivElement>;\n\n  /**\n   * className for each classes in the indicator,\n   * active: current item,\n   * close: item that close with current item,\n   * far: item that far from current item\n   */\n  indicatorClassNames?: {\n    active?: string;\n    close?: string;\n    far?: string;\n  };\n\n  /**\n   * Render custom dot element\n   * @param index dot's index\n   * @param defaultClassName default class for the dot element, it contain styles to display the dot correctly\n   * @example\n   * <Carousel\n   *   renderDot={(index, defaultClassName) => (\n   *     // data-index is required for scrolling purposes\n   *     <div key={index} data-index={index} className={defaultClassName} />\n   *   )}\n   * >\n   *   ...\n   * </Carousel>\n   */\n  renderDot?: (index: number, defaultClassName: string) => JSX.Element;\n}\n\nconst Carousel = ({\n  children,\n  show,\n  infiniteLoop,\n  withIndicator,\n  renderPreviousButton,\n  renderNextButton,\n  containerClassName,\n  wrapperClassName,\n  contentWrapperClassName,\n  contentClassName,\n  containerProps,\n  wrapperProps,\n  contentWrapperProps,\n  contentProps,\n  indicatorContainerClassName,\n  indicatorContainerProps,\n  indicatorClassNames,\n}: ICarouselProps): JSX.Element => {\n  const indicatorContainerRef = React.useRef<HTMLDivElement>(null);\n\n  /**\n   * Total item\n   */\n  const length = React.useMemo(() => Children.count(children), [children]);\n\n  /**\n   * Is the carousel repeating it's item\n   */\n  const isRepeating = React.useMemo(\n    () => infiniteLoop && Children.count(children) > show,\n    [children, infiniteLoop, show]\n  );\n\n  /**\n   * Current Index Item of the Carousel\n   */\n  const [currentIndex, setCurrentIndex] = React.useState<number>(\n    isRepeating ? show : 0\n  );\n\n  /**\n   * Is the carousel's transition enabled\n   */\n  const [isTransitionEnabled, setTransitionEnabled] =\n    React.useState<boolean>(true);\n\n  /**\n   * First touch position to be used in calculation for the swipe speed\n   */\n  const [touchPosition, setTouchPosition] = React.useState<null | number>(null);\n\n  /**\n   * Handle if the carousel is repeating\n   * and the currentIndex have been set to the last or first item\n   */\n  React.useEffect(() => {\n    if (isRepeating) {\n      if (currentIndex === show || currentIndex === length) {\n        setTransitionEnabled(true);\n      }\n    }\n  }, [currentIndex, isRepeating, show, length]);\n\n  React.useEffect(() => {\n    if (withIndicator) {\n      const active =\n        indicatorContainerRef.current?.querySelector(\".dots-active\");\n      if (active) {\n        let index = active.getAttribute(\"data-index\");\n        if (index !== null && indicatorContainerRef.current?.scrollTo) {\n          indicatorContainerRef.current?.scrollTo({\n            left: ((Number(index) - 2) / 5) * 50,\n            behavior: \"smooth\",\n          });\n        }\n      }\n    }\n  }, [withIndicator, currentIndex]);\n\n  /**\n   * Move forward to the next item\n   */\n  const nextItem = () => {\n    if (isRepeating || currentIndex < length - show) {\n      setCurrentIndex((prevState) => prevState + 1);\n    }\n  };\n\n  /**\n   * Move backward to the previous item\n   */\n  const previousItem = () => {\n    if (isRepeating || currentIndex > 0) {\n      setCurrentIndex((prevState) => prevState - 1);\n    }\n  };\n\n  /**\n   * Handle when the user start the swipe gesture\n   * @param e TouchEvent\n   */\n  const handleTouchStart = (e: React.TouchEvent<HTMLDivElement>) => {\n    // Save the first position of the touch\n    const touchDown = e.touches[0].clientX;\n    setTouchPosition(touchDown);\n  };\n\n  /**\n   * Handle when the user move the finger in swipe gesture\n   * @param e TouchEvent\n   */\n  const handleTouchMove = (e: React.TouchEvent<HTMLDivElement>) => {\n    // Get initial location\n    const touchDown = touchPosition;\n\n    // Proceed only if the initial position is not null\n    if (touchDown === null) {\n      return;\n    }\n\n    // Get current position\n    const currentTouch = e.touches[0].clientX;\n\n    // Get the difference between previous and current position\n    const diff = touchDown - currentTouch;\n\n    // Go to next item\n    if (diff > 5) {\n      nextItem();\n    }\n\n    // Go to previous item\n    if (diff < -5) {\n      previousItem();\n    }\n\n    // Reset initial touch position\n    setTouchPosition(null);\n  };\n\n  /**\n   * Handle when carousel transition's ended\n   */\n  const handleTransitionEnd = () => {\n    if (isRepeating) {\n      if (currentIndex === 0) {\n        setTransitionEnabled(false);\n        setCurrentIndex(length);\n      } else if (currentIndex === length + show) {\n        setTransitionEnabled(false);\n        setCurrentIndex(show);\n      }\n    }\n  };\n\n  /**\n   * Render previous items before the first item\n   */\n  const extraPreviousItems = React.useMemo(() => {\n    let output = [];\n    for (let index = 0; index < show; index++) {\n      output.push(Children.toArray(children)[length - 1 - index]);\n    }\n    output.reverse();\n    return output;\n  }, [children, length, show]);\n\n  /**\n   * Render next items after the last item\n   */\n  const extraNextItems = React.useMemo(() => {\n    let output = [];\n    for (let index = 0; index < show; index++) {\n      output.push(Children.toArray(children)[index]);\n    }\n    return output;\n  }, [children, show]);\n\n  const renderDots = React.useMemo(() => {\n    let output = [];\n\n    const localShow = isRepeating ? show : 0;\n    const localLength = isRepeating ? length : Math.ceil(length / show);\n    const calculatedActiveIndex =\n      currentIndex - localShow < 0\n        ? length + (currentIndex - localShow)\n        : currentIndex - localShow;\n\n    for (let index = 0; index < localLength; index++) {\n      let className = \"\";\n      if (calculatedActiveIndex === index) {\n        className = indicatorClassNames?.active || \"dots-active\";\n      } else {\n        if (calculatedActiveIndex === 0) {\n          if (calculatedActiveIndex + index <= 2) {\n            className = indicatorClassNames?.close || \"dots-close\";\n          } else {\n            className = indicatorClassNames?.far || \"dots-far\";\n          }\n        } else if (calculatedActiveIndex === localLength - 1) {\n          if (Math.abs(calculatedActiveIndex - index) <= 2) {\n            className = indicatorClassNames?.close || \"dots-close\";\n          } else {\n            className = indicatorClassNames?.far || \"dots-far\";\n          }\n        } else {\n          if (Math.abs(calculatedActiveIndex - index) === 1) {\n            className = indicatorClassNames?.close || \"dots-close\";\n          } else {\n            className = indicatorClassNames?.far || \"dots-far\";\n          }\n        }\n      }\n      output.push(<div key={index} data-index={index} className={className} />);\n    }\n\n    return output;\n  }, [currentIndex, indicatorClassNames, isRepeating, length, show]);\n\n  return (\n    <div\n      data-testid=\"carousel-container\"\n      className={`carousel-container ${containerClassName || \"\"}`}\n      {...containerProps}\n    >\n      <div\n        data-testid=\"carousel-wrapper\"\n        className={`carousel-wrapper ${wrapperClassName || \"\"}`}\n        {...wrapperProps}\n      >\n        {isRepeating || currentIndex > 0 ? (\n          renderPreviousButton ? (\n            renderPreviousButton(previousItem, \"left-arrow-button\")\n          ) : (\n            <button\n              data-testid=\"left-button\"\n              onClick={previousItem}\n              className=\"left-arrow-button\"\n            >\n              <span className=\"left-arrow\" />\n            </button>\n          )\n        ) : null}\n        <div\n          data-testid=\"carousel-content-wrapper\"\n          className={`carousel-content-wrapper ${\n            contentWrapperClassName || \"\"\n          }`}\n          {...contentWrapperProps}\n          onTouchStart={handleTouchStart}\n          onTouchMove={handleTouchMove}\n        >\n          <div\n            data-testid=\"carousel-content\"\n            className={`carousel-content show-${show} ${\n              contentClassName || \"\"\n            }`}\n            {...contentProps}\n            style={{\n              transform: `translateX(-${currentIndex * (100 / show)}%)`,\n              transition: !isTransitionEnabled ? \"none\" : undefined,\n            }}\n            onTransitionEnd={() => handleTransitionEnd()}\n          >\n            {length > show && isRepeating && extraPreviousItems}\n            {children}\n            {length > show && isRepeating && extraNextItems}\n          </div>\n        </div>\n        {isRepeating || currentIndex < length - show ? (\n          renderNextButton ? (\n            renderNextButton(nextItem, \"right-arrow-button\")\n          ) : (\n            <button\n              data-testid=\"right-button\"\n              onClick={nextItem}\n              className=\"right-arrow-button\"\n            >\n              <span className=\"right-arrow\" />\n            </button>\n          )\n        ) : null}\n      </div>\n      {withIndicator && (\n        <div>\n          <div\n            data-testid=\"indicator-container\"\n            ref={indicatorContainerRef}\n            className={`indicator-container ${\n              indicatorContainerClassName || \"\"\n            }`}\n            {...indicatorContainerProps}\n          >\n            {renderDots}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Carousel;\n"]},"metadata":{},"sourceType":"module"}